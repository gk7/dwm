--- dwm.c.backup	2013-03-15 21:01:53.069289000 +0530
+++ dwm.c	2013-03-15 21:15:21.421577242 +0530
@@ -38,6 +38,7 @@
 #include <X11/Xutil.h>
 #include <fontconfig/fontconfig.h>
 #include <X11/Xft/Xft.h>
+#include <X11/XKBlib.h>
 #ifdef XINERAMA
 #include <X11/extensions/Xinerama.h>
 #endif /* XINERAMA */
@@ -192,6 +193,7 @@ static void drawbars(void);
 static void drawcoloredtext(char *text);
 static void drawtext(const char *text, XftColor col[ColLast], Bool pad);
 static void enternotify(XEvent *e);
+static void enternotify_ffm(XEvent *e);
 static void expose(XEvent *e);
 static void focus(Client *c);
 static void focusin(XEvent *e);
@@ -218,6 +220,7 @@ static void pop(Client *);
 static void propertynotify(XEvent *e);
 static void quit(const Arg *arg);
 static Monitor *recttomon(int x, int y, int w, int h);
+static void reload(const Arg *arg);
 static void resize(Client *c, int x, int y, int w, int h, Bool interact);
 static void resizeclient(Client *c, int x, int y, int w, int h);
 static void resizemouse(const Arg *arg);
@@ -240,6 +243,7 @@ static void tagmon(const Arg *arg);
 static int textnw(const char *text, unsigned int len);
 static void tile(Monitor *);
 static void togglebar(const Arg *arg);
+static void toggle_ffm(const Arg *arg);
 static void togglefloating(const Arg *arg);
 static void toggletag(const Arg *arg);
 static void toggleview(const Arg *arg);
@@ -277,7 +281,7 @@ static void (*handler[LASTEvent]) (XEven
 	[ConfigureRequest] = configurerequest,
 	[ConfigureNotify] = configurenotify,
 	[DestroyNotify] = destroynotify,
-	[EnterNotify] = enternotify,
+	[EnterNotify] = enternotify_ffm,
 	[Expose] = expose,
 	[FocusIn] = focusin,
 	[KeyPress] = keypress,
@@ -467,6 +471,8 @@ buttonpress(XEvent *e) {
 	}
 	else if((c = wintoclient(ev->window))) {
 		focus(c);
+		restack(selmon);
+		XAllowEvents(dpy, ReplayPointer, CurrentTime);
 		click = ClkClientWin;
 	}
 	for(i = 0; i < LENGTH(buttons); i++)
@@ -865,6 +871,25 @@ enternotify(XEvent *e) {
 	focus(c);
 }
 
+/* toggle focus-follows-mouse */
+static Bool focus_follows_mouse = False;
+
+void
+toggle_ffm(const Arg *arg) {
+  // Swap EnterNotify handler when first toggle is occured.
+  if (handler[EnterNotify] == enternotify_ffm) {
+    handler[EnterNotify] = enternotify;
+} else if (handler[EnterNotify] == enternotify) {
+	handler[EnterNotify] = enternotify_ffm;
+  }
+}
+	
+void
+enternotify_ffm(XEvent *e) {
+  if (focus_follows_mouse)
+    enternotify(e);
+}
+
 void
 expose(XEvent *e) {
 	Monitor *m;
@@ -1028,18 +1053,17 @@ grabbuttons(Client *c, Bool focused) {
 		unsigned int i, j;
 		unsigned int modifiers[] = { 0, LockMask, numlockmask, numlockmask|LockMask };
 		XUngrabButton(dpy, AnyButton, AnyModifier, c->win);
-		if(focused) {
-			for(i = 0; i < LENGTH(buttons); i++)
-				if(buttons[i].click == ClkClientWin)
-					for(j = 0; j < LENGTH(modifiers); j++)
-						XGrabButton(dpy, buttons[i].button,
-						            buttons[i].mask | modifiers[j],
-						            c->win, False, BUTTONMASK,
-						            GrabModeAsync, GrabModeSync, None, None);
-		}
-		else
+		if(!focused) 
 			XGrabButton(dpy, AnyButton, AnyModifier, c->win, False,
-			            BUTTONMASK, GrabModeAsync, GrabModeSync, None, None);
+			            BUTTONMASK, GrabModeSync, GrabModeSync, None, None);
+		for(i = 0; i < LENGTH(buttons); i++)
+			if(buttons[i].click == ClkClientWin)
+				for(j = 0; j < LENGTH(modifiers); j++)
+					XGrabButton(dpy, buttons[i].button,
+					            buttons[i].mask | modifiers[j],
+					            c->win, False, BUTTONMASK,
+					            GrabModeAsync, GrabModeSync, None, None);
+
 	}
 }
 
@@ -1096,7 +1120,7 @@ keypress(XEvent *e) {
 	XKeyEvent *ev;
 
 	ev = &e->xkey;
-	keysym = XKeycodeToKeysym(dpy, (KeyCode)ev->keycode, 0);
+	keysym = XkbKeycodeToKeysym(dpy, (KeyCode)ev->keycode, 0, 0);
 	for(i = 0; i < LENGTH(keys); i++)
 		if(keysym == keys[i].keysym
 		&& CLEANMASK(keys[i].mod) == CLEANMASK(ev->state)
@@ -1354,6 +1378,15 @@ recttomon(int x, int y, int w, int h) {
 }
 
 void
+reload(const Arg *arg){
+    if (arg->v) {
+        execvp(((char **)arg->v)[0], (char **)arg->v);
+    } else {
+        execlp("dwm", "dwm", NULL);
+    }
+}
+
+void
 resize(Client *c, int x, int y, int w, int h, Bool interact) {
 	if(applysizehints(c, &x, &y, &w, &h, interact))
 		resizeclient(c, x, y, w, h);
