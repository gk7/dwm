--- dwm.c.backup	2013-03-15 21:26:52.684498000 +0530
+++ dwm.c	2013-03-15 21:33:24.229044446 +0530
@@ -184,6 +184,7 @@ static void clientmessage(XEvent *e);
 static void configure(Client *c);
 static void configurenotify(XEvent *e);
 static void configurerequest(XEvent *e);
+static void cycle(const Arg *arg);
 static Monitor *createmon(void);
 static void destroynotify(XEvent *e);
 static void detach(Client *c);
@@ -202,6 +203,7 @@ static void focusin(XEvent *e);
 static void focusmon(const Arg *arg);
 static void focusstack(const Arg *arg);
 static XftColor getcolor(const char *colstr);
+static void gaplessgrid(Monitor *m);
 static Bool getrootptr(int *x, int *y);
 static long getstate(Window w);
 static Bool gettextprop(Window w, Atom atom, char *text, unsigned int size);
@@ -241,6 +243,7 @@ static void showhide(Client *c);
 static void sigchld(int unused);
 static void spawn(const Arg *arg);
 static void tag(const Arg *arg);
+static void tagcycle(const Arg *arg);
 static void tagmon(const Arg *arg);
 static int textnw(const char *text, unsigned int len);
 static void tile(Monitor *);
@@ -695,6 +698,37 @@ createmon(void) {
 }
 
 void
+cycle(const Arg *arg) {
+    int seltags = selmon->tagset[selmon->seltags];
+    int numtags = LENGTH(tags);
+    int delta = arg->i;
+    int curtag = -1;
+
+    while(!(seltags & (1 << ++curtag)));
+    curtag = (curtag + delta) % numtags;
+    if(curtag < 0) curtag += numtags;
+
+    const Arg a = { .i = 1 << curtag };
+    view(&a);
+}
+
+void
+tagcycle(const Arg *arg) {
+    int seltags = selmon->tagset[selmon->seltags];
+    int numtags = LENGTH(tags);
+    int delta = arg->i;
+    int curtag = -1;
+
+    while(!(seltags & (1 << ++curtag)));
+    curtag = (curtag + delta) % numtags;
+    if(curtag < 0) curtag += numtags;
+
+    const Arg a = { .i = 1 << curtag };
+    tag(&a);
+    view(&a);
+}
+
+void
 destroynotify(XEvent *e) {
 	Client *c;
 	XDestroyWindowEvent *ev = &e->xdestroywindow;
@@ -974,6 +1008,43 @@ focusstack(const Arg *arg) {
 	}
 }
 
+void
+gaplessgrid(Monitor *m) {
+	unsigned int n, cols, rows, cn, rn, i, cx, cy, cw, ch;
+	Client *c;
+
+	for(n = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next))
+		n++;
+	if(n == 0)
+		return;
+
+	/* grid dimensions */
+	for(cols = 0; cols <= n/2; cols++)
+		if(cols*cols >= n)
+			break;
+	if(n == 5) /* set layout against the general calculation: not 1:2:2, but 2:3 */
+		cols = 2;
+	rows = n/cols;
+
+	/* window geometries */
+	cw = cols ? m->ww / cols : m->ww;
+	cn = 0; /* current column number */
+	rn = 0; /* current row number */
+	for(i = 0, c = nexttiled(m->clients); c; i++, c = nexttiled(c->next)) {
+		if(i/rows + 1 > cols - n%cols)
+			rows = n/cols + 1;
+		ch = rows ? m->wh / rows : m->wh;
+		cx = m->wx + cn*cw;
+		cy = m->wy + rn*ch;
+		resize(c, cx, cy, cw - 2 * c->bw, ch - 2 * c->bw, False);
+		rn++;
+		if(rn >= rows) {
+			rn = 0;
+			cn++;
+		}
+	}
+}
+ 
 Atom
 getatomprop(Client *c, Atom prop) {
 	int di;
--- /dev/null	2013-01-16 00:36:23.570236280 +0530
+++ bstack.c	2013-01-16 07:32:23.084863420 +0530
@@ -0,0 +1,25 @@
+static void
+bstack(Monitor *m) {
+	unsigned int i, n, w, mh, mx, tx;
+	Client *c;
+
+	for(n = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), n++);
+	if(n == 0)
+		return;
+
+	if(n > m->nmasters[m->curtag])
+		mh = m->nmasters[m->curtag] ? m->wh * m->mfacts[m->curtag] : 0;
+	else
+		mh = m->wh;
+	for(i = mx = tx = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), i++)
+		if(i < m->nmasters[m->curtag]) {
+			w = (m->ww - mx) / (MIN(n, m->nmasters[m->curtag]) - i);
+			resize(c, m->wx + mx, m->wy, w - (2*c->bw), mh - (2*c->bw), False);
+			mx += WIDTH(c) + 2;
+		}
+		else {
+			w = (m->ww - tx) / (n - i);
+			resize(c, m->wx + tx, m->wy + mh, w - (2*c->bw), m->wh - mh - (2*c->bw), False);
+				tx += WIDTH(c) + 2;
+		}
+}
--- /dev/null	2012-12-10 22:19:32.728356215 +0530
+++ moveresize.c	2012-12-11 03:17:42.173312000 +0530
@@ -0,0 +1,21 @@
+void
+moveresize(const Arg *arg) {
+
+	XEvent ev;
+	Monitor *m = selmon;
+	
+	if(!(m->sel && arg && arg->v))
+		return;
+	if(m->lt[m->sellt]->arrange && !m->sel->isfloating)
+		togglefloating(NULL);
+	
+	resize(m->sel, m->sel->x + ((int *)arg->v)[0],
+			m->sel->y + ((int *)arg->v)[1],
+			m->sel->w + ((int *)arg->v)[2],
+			m->sel->h + ((int *)arg->v)[3],
+			True);
+	
+	while(XCheckMaskEvent(dpy, EnterWindowMask, &ev));
+}
+
+
