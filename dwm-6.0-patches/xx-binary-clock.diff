--- /dev/null	2012-11-22 12:28:17.787873076 +0530
+++ binary_clock/binclock.c	2012-09-08 20:54:39.000000000 +0530
@@ -0,0 +1,33 @@
+#include <ctype.h>
+#include <string.h>
+#include <sys/time.h>
+#include "binclock.h"
+
+size_t binstrftime(char* ptr, size_t maxsize, const char* format, const struct tm * timeptr) {
+    // this wrapper implements a "binary watch" in a very basic and hackish way
+    // 12h mode with "%:b" and 24h mode with "%:B" no other chars are being looked at.
+    int i, hour;
+    char lwr_format[5] = { 0 }, bintime[7] = "      ";
+    const char tchars[5] = " v^X";
+
+    for(i = 0; i < 4 && format[i] != '\0'; i++)
+        lwr_format[i] = tolower(format[i]);
+    lwr_format[4] = '\0';
+
+    if(!strcmp(lwr_format, "%:b")) {
+        hour = timeptr->tm_hour;
+        if(!strcmp(lwr_format, format)) {
+            hour %= 12;
+            if(timeptr->tm_hour == 0)
+                hour = 12;
+        }
+        // count down 32 16 8 4 2 1
+        for(i = 5; i >= 0; i--)
+            bintime[5-i] = tchars[((hour & (1 << i)) >> i) * 2 + ((timeptr->tm_min & (1 << i)) >> i)];
+        if(strlen(bintime) < maxsize) {
+           strcpy(ptr, bintime);
+            return strlen(ptr);
+        }
+    } else return strftime(ptr, maxsize, format, timeptr);
+    return 0;
+}
--- /dev/null	2012-11-22 12:28:17.787873076 +0530
+++ binary_clock/binclock.h	2012-09-08 20:54:39.000000000 +0530
@@ -0,0 +1,8 @@
+#ifndef __BINCLOCK_H__
+#define __BINCLOCK_H__
+
+#include <time.h>
+
+extern size_t binstrftime(char* ptr, size_t maxsize, const char* format, const struct tm *timeptr);
+
+#endif // __BINCLOCK_H__
diff -ur dwm/dwm.c dwm-binclock/dwm.c
--- dwm/dwm.c	2012-09-05 13:30:15.904165755 +0200
+++ dwm-binclock/dwm.c	2012-09-08 16:50:52.625275616 +0200
@@ -28,7 +28,9 @@
 #include <stdlib.h>
 #include <string.h>
 #include <unistd.h>
+#include <sys/time.h>
 #include <sys/types.h>
+#include <sys/select.h>
 #include <sys/wait.h>
 #include <X11/cursorfont.h>
 #include <X11/keysym.h>
@@ -40,6 +42,7 @@
 #ifdef XINERAMA
 #include <X11/extensions/Xinerama.h>
 #endif /* XINERAMA */
+#include "binclock.h"
 
 /* macros */
 #define BUTTONMASK              (ButtonPressMask|ButtonReleaseMask)
@@ -285,6 +288,7 @@
 static Monitor *mons = NULL, *selmon = NULL;
 static Window root;
 static int globalborder ;
+static size_t status_len;
 
 /* configuration, allows nested code to access above variables */
 #include "config.h"
@@ -725,6 +729,12 @@
 	unsigned int i, occ = 0, urg = 0;
 	unsigned long *col;
 	Client *c;
+	struct timeval now;
+
+	if(status_len == 0)
+		status_len = strlen(stext);
+	gettimeofday(&now, 0);
+	binstrftime(&(stext[status_len]), 255 - status_len, clock_fmt, localtime(&(now.tv_sec)));
 
 	for(c = m->clients; c; c = c->next) {
 		occ |= c->tags;
@@ -1452,11 +1462,29 @@
 void
 run(void) {
 	XEvent ev;
+	struct timeval tv, tv_period = { 3, 0 };
+	fd_set in_fds;
+	int x11_fd = ConnectionNumber(dpy);
+
+	tv.tv_sec = tv_period.tv_sec;
+	tv.tv_usec = tv_period.tv_usec;
+
 	/* main event loop */
 	XSync(dpy, False);
-	while(running && !XNextEvent(dpy, &ev))
-		if(handler[ev.type])
-			handler[ev.type](&ev); /* call handler */
+	while(running) {
+		FD_ZERO(&in_fds);
+		FD_SET(x11_fd, &in_fds);
+		if(!select(x11_fd+1, &in_fds, 0, 0, &tv)) {
+			drawbars();
+			tv.tv_sec = tv_period.tv_sec;
+			tv.tv_usec = tv_period.tv_usec;
+		}
+		while(XPending(dpy)) {
+			XNextEvent(dpy, &ev);
+			if(handler[ev.type])
+				handler[ev.type](&ev);
+		}
+	}
 }
 
 void
@@ -2046,7 +2074,7 @@
 void
 updatestatus(void) {
 	if(!gettextprop(root, XA_WM_NAME, stext, sizeof(stext)))
-		strcpy(stext, "dwm-"VERSION);
+		strcpy(stext, "dwm-"VERSION" ");
 	drawbar(selmon);
 }
 
diff -ur dwm/Makefile dwm-binclock/Makefile
--- dwm/Makefile	2012-09-05 13:30:15.894165753 +0200
+++ dwm-binclock/Makefile	2012-09-08 16:50:52.625275616 +0200
@@ -3,7 +3,7 @@
 
 include config.mk
 
-SRC = dwm.c
+SRC = binclock.c dwm.c
 OBJ = ${SRC:.c=.o}
 
 all: options dwm

